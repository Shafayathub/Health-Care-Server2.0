model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  status             UserStatus @default(ACTIVE)
  needPasswordChange Boolean    @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  admin   Admin?
  doctor  Doctor?
  patient Patient?
  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation based on email
  email String @unique
  user  User   @relation(fields: [email], references: [email], onDelete: Cascade)
  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  name                String
  profilePhoto        String?
  contactNumber       String?
  address             String?
  registrationNumber  String   @unique
  appointmentFee      Float
  qualification       String
  currentWorkingPlace String?
  designation         String?
  isDeleted           Boolean  @default(false)
  averageRating       Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation based on email
  email       String           @unique
  user        User             @relation(fields: [email], references: [email], onDelete: Cascade)

  doctorSpecialties   DoctorSpecialty[]
  doctorSchedules     DoctorSchedule[]
  slots         AppointmentSlot[]
  reviews       Review[]
  prescriptions Prescription[]
  appointments  Appointment[]
  @@map("doctors")
}

model Patient {
  id                         String        @id @default(uuid())
  name                       String
  occupation                 String?
  dateOfBirth                DateTime?
  gender                     Gender?
  maritalStatus              MaritalStatus?
  bloodGroup                 BloodGroup?
  hasAllergies               Boolean?
  hasDiabetes                Boolean?
  height                     String?
  weight                     String?
  dietaryPreferences         String?
  pregnancyStatus            String?
  immunizationStatus         String?
  hasPastSurgeries           Boolean?
  recentInjury               Boolean?
  rawHistoryText             String?
  structuredMedicalHistory   Json?
  isDeleted     Boolean  @default(false)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt

  // Relation based on email
  email          String          @unique
  user           User            @relation(fields: [email], references: [email], onDelete: Cascade)

  appointments   Appointment[]
  reviews        Review[]
  medicalReports MedicalReport[]
  @@map("patients")
}